package geojson

import (
	"log"
)

const SubplaceTypeAll = "N"

// Generated by https://quicktype.io

type Response struct {
	Landmark  Landmark   `json:"landmark"`
	Subplaces []Subplace `json:"subplaces"`
}

type Landmark struct {
	NameEn            string           `json:"name_en"`
	NameID            string           `json:"name_id"`
	Address           string           `json:"address"`
	City              string           `json:"city"`
	Type              string           `json:"type"`
	StartDate         string           `json:"start_date"`
	EndDate           string           `json:"end_date"`
	IsActive          bool             `json:"is_active"`
	Restricted        bool             `json:"restricted"`
	PredefinedDropoff bool             `json:"predefined_dropoff"`
	Geometry          ResponseGeometry `json:"geometry"`
}

type ResponseGeometry struct {
	Type        string        `json:"type"`
	Coordinates [][][]float64 `json:"coordinates"`
}

type Subplace struct {
	NameEn         string    `json:"name_en"`
	NameID         string    `json:"name_id"`
	IsServicePoint bool      `json:"is_service_point"`
	SubplaceType   string    `json:"subplace_type"`
	Location       []float64 `json:"location"`
}

func GetGeometry(coordinates []interface{}) ResponseGeometry {
	finalCoordinates := make([][][]float64, 1)

	for i, v := range coordinates {
		secondLayer, ok := v.([]interface{})
		if !ok {
			break
		}

		finalCoordinates[i] = make([][]float64, len(secondLayer))

		for j, c := range secondLayer {
			thirdLayer, ok := c.([]interface{})
			if !ok {
				log.Printf("second layer invalid casting type: %T", c)
				break
			}

			finalCoordinates[i][j] = make([]float64, 0)
			for _, value := range thirdLayer {
				coord, ok := value.(float64)
				if !ok {
					log.Printf("third layer invalid casting type: %T", value)
					break
				}

				if coord == 0 {
					//log.Println("ignore zero location")
					continue
				}

				finalCoordinates[i][j] = append(finalCoordinates[i][j], coord)
			}
		}

		//log.Printf("%v", finalCoordinates)
	}

	return ResponseGeometry{
		Type:        "Polygon",
		Coordinates: finalCoordinates,
	}
}
